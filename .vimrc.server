" Tarrex's vimrc
"       ------ Enjoy vim, enjoy coding.

" ============> General <============
if &compatible | set nocompatible | endif

syntax on
filetype indent plugin on

set number
set noruler
set nowrap
set showcmd
set noshowmode
set laststatus=2
set display=lastline
set cursorline
silent! set cursorlineopt=number
silent! set signcolumn=number
silent! set termguicolors
set background=dark
set visualbell t_vb=

set shiftround
set shiftwidth=4
set expandtab
set tabstop=4
set softtabstop=4
set smarttab
set autoindent

set breakindent
silent! set showbreak=↪\

set hlsearch
set ignorecase
set incsearch
set smartcase

set encoding=utf-8
set fileencodings=ucs-bom,utf-8,gbk,gb18030,big5,latin1
set fileformats=unix,dos,mac

set autoread
set autowrite
set backspace=indent,eol,start
set nostartofline
set nojoinspaces
set hidden
set splitbelow
set splitright
set clipboard=unnamed,unnamedplus
set mouse=a
set t_ut=
set ttyscroll=3
set scrolloff=1
set sidescroll=5
set sidescrolloff=1

set history=1000

set include=
set completeopt=menu,menuone
set formatoptions-=cro
set formatoptions+=mB
set shortmess=aoOcFtT
silent! set spelloptions=camel
set fillchars=vert:┃
set listchars=eol:¬
set listchars+=tab:\|\
set listchars+=extends:❯
set listchars+=precedes:❮
set listchars+=nbsp:∅
set virtualedit=block
set whichwrap=b,s,h,l,<,>,[,]
set matchpairs+=<:>,《:》,「:」,（:）,【:】

let &directory = expand('~/.vim/tmp/swap')
if !isdirectory(&directory)
    call mkdir(&directory, 'p', 0700)
endif
set undofile
let &undodir = expand('~/.vim/tmp/undo')
if !isdirectory(&undodir)
    call mkdir(&undodir, 'p', 0700)
endif

set wildmenu
set wildignorecase
set wildignore+=*~,*.o,*.obj,*.out,*.so,*.egg,*.py[cdo],*.class,*.jar

function! Statusline() abort
    let line  = ''
    let line .= ' %{mode()} '                           " buffer mode
    let line .= '%{&paste!=#"paste"?"| paste ":""}'     " paste state
    let line .= '%{&spell?"| ".&spelllang." ":""}'      " spell state
    let line .= '| %n '                                 " buffer number
    let line .= '%{&ro!=""?"| RO ":""}'                 " read only flag
    let line .= '| %{expand("%:t")} '                   " filename
    let line .= '%{&modified?"+":""}'                   " modified
    let line .= ' %= '                                  " separator
    let line .= '%{&ff} | '                             " file format
    let line .= '%{&fenc?&fenc:&enc} | '                " file encoding
    let line .= '%{&ft!=""?&ft:"none"} | '              " file type
    let line .= '%3p%% | '                              " percent through file
    let line .= '%3l:%-2v '                             " cursor column
    return line
endfunction

let &statusline = Statusline()

" ============> key mappings <============
let g:mapleader      = ','  " set vim map leader, <leader>
let g:maplocalleader = '\'  " set vim local map leader, <localleader>

" Disable Ex mode and command history key bindings
nnoremap Q  <nop>
nnoremap q: <nop>

" Toggle number,paste,cuc,list,wrap,spell and so on.
nnoremap <silent> <localleader>n :setl number! nu?<cr>
nnoremap <silent> <localleader>r :setl relativenumber! rnu?<cr>
nnoremap <silent> <localleader>p :setl paste!<cr>
nnoremap <silent> <localleader>c :setl cursorcolumn! cuc?<cr>
nnoremap <silent> <localleader>l :setl list! list?<cr>
nnoremap <silent> <localleader>w :setl wrap! wrap?<cr>
nnoremap <silent> <localleader>s :setl spell! spelllang=en_us<cr>
nnoremap <silent> <localleader>f :setl foldenable! nofen?<cr>
nnoremap <silent> <localleader>b :let &bg=(&bg=='dark'?'light':'dark')<cr>

" Buffer switching
nnoremap <silent> [b    :bprevious<cr>
nnoremap <silent> ]b    :bnext<cr>
nnoremap <silent> [B    :bfirst<cr>
nnoremap <silent> ]B    :blast<cr>
nnoremap <silent> <c-q> :bdelete<cr>

" Tab switching
nnoremap <silent> [t    :tabprevious<cr>
nnoremap <silent> ]t    :tabnext<cr>
nnoremap <silent> [T    :tabfirst<cr>
nnoremap <silent> ]T    :tablast<cr>
nnoremap <silent> <c-t> :tabnew<cr>
inoremap <silent> <c-t> <esc>:tabnew<cr>
nnoremap <silent> tt    <c-w>T

" Quickfox switching
nnoremap <silent> [q :cprevious<cr>
nnoremap <silent> ]q :cnext<cr>
nnoremap <silent> [Q :cfirst<cr>
nnoremap <silent> ]Q :clast<cr>

" LocationList switching
nnoremap <silent> [l :lprevious<cr>
nnoremap <silent> ]l :lnext<cr>
nnoremap <silent> [L :lfirst<cr>
nnoremap <silent> ]L :llast<cr>

" Preview window switching
nnoremap <silent> [<c-t> :ptprevious<cr>
nnoremap <silent> ]<c-t> :ptnext<cr>

" Window switching in normal mode
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" Move lines left or right
vnoremap <silent> <s-tab> <gv
vnoremap <silent> <tab> >gv

" Move lines up or down
vnoremap <silent> <up>   :m '<-2<cr>gv=gv
vnoremap <silent> <down> :m '>+1<cr>gv=gv

" Search in selected visual block
vnoremap / :<c-u>call feedkeys('/\%>'.(line("'<")-1).'l\%<'.(line("'>")+1)."l")<cr>

" Fast save
noremap  <silent> <c-s> :update<cr>
inoremap <silent> <c-s> <esc>:update<cr>

" Replace a word
noremap <silent> <space>y yiw
noremap <silent> <space>p viw"0p

" Do not yank when x
noremap <silent> x  "_x

" Move vertically by visual line
nnoremap <silent> <expr> j v:count ? 'j' : 'gj'
nnoremap <silent> <expr> k v:count ? 'k' : 'gk'
vnoremap <silent> <expr> j v:count ? 'j' : 'gj'
vnoremap <silent> <expr> k v:count ? 'k' : 'gk'

" Switch to working directory of the open file
nnoremap <leader>cd :<c-u>lcd %:p:h<cr>:pwd<cr>

" Turn off search highlight
nnoremap <silent> <space>n :nohlsearch<cr>

" Open terminal on the right
nnoremap <silent> <space>t :terminal<cr>

" Hex read
nnoremap <silent> <space>hr :%!xxd<cr> :set filetype=xxd<cr>
" Hex write
nnoremap <silent> <space>hw :%!xxd -r<cr> :set binary<cr> :set filetype=<cr>

" Map w!! to write file with sudo
cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" Reselect the text that has just been pasted
nnoremap <silent> <space>s `[V`]

" Select all content
noremap <silent> <space>aa ggVG

" Resize window
noremap <silent> <space>- :resize -2<cr>
noremap <silent> <space>= :resize +2<cr>
noremap <silent> <space>[ :vertical resize -2<cr>
noremap <silent> <space>] :vertical resize +2<cr>
noremap <silent> <space>/ :wincmd =<cr>

" Correct vim exit command
cnoreabbrev Wq      wq
cnoreabbrev Wa      wa
cnoreabbrev wQ      wq
cnoreabbrev WQ      wq
cnoreabbrev W       w
cnoreabbrev Q       q
cnoreabbrev Qall    qall

" ============> Custom <============
" ----> Highlights
function! MyHighlights() abort
    highlight Normal        ctermbg=NONE guibg=NONE
    highlight NonText       ctermbg=NONE guibg=NONE
    highlight CursorLineNr  ctermbg=NONE guibg=NONE
    highlight LineNr        ctermbg=NONE guibg=NONE
    highlight CursorLine    ctermbg=NONE guibg=NONE
    highlight SpecialKey    ctermbg=NONE guibg=NONE
    highlight EndOfBuffer   ctermbg=NONE guibg=NONE
    highlight Folded        ctermbg=NONE guibg=NONE
    highlight FoldColumn    ctermbg=NONE guibg=NONE
    highlight DiffAdd       ctermbg=NONE guibg=NONE
    highlight DiffChange    ctermbg=NONE guibg=NONE
    highlight DiffDelete    ctermbg=NONE guibg=NONE

    highlight StatusLine       ctermbg=242 ctermfg=15  guibg=#6c6c6c guifg=#ffffff
    highlight StatusLineNC     ctermbg=238 ctermfg=249 guibg=#444444 guifg=#b2b2b2
    highlight StatusLineTerm   ctermbg=242 ctermfg=15  guibg=#6c6c6c guifg=#ffffff
    highlight StatusLineTermNC ctermbg=238 ctermfg=249 guibg=#444444 guifg=#b2b2b2
    highlight Pmenu            ctermbg=8   ctermfg=0   guibg=#808080 guifg=#000000
    highlight PmenuSel         ctermbg=36  ctermfg=0   guibg=#00af87 guifg=#000000
    highlight PmenuSbar        ctermbg=7   ctermfg=15  guibg=#c0c0c0 guifg=#ffffff
    highlight PmenuThumb       ctermbg=15  ctermfg=7   guibg=#ffffff guifg=#c0c0c0
endfunction

augroup Highlights
    autocmd!
    autocmd ColorScheme * call MyHighlights()
augroup END

" ----> Color
silent! colorscheme desert

" ----> Filetype
augroup FileTypeCustom
    autocmd!
    autocmd FileType html,css,less,sass,scss      setl sw=2 ts=2 sts=2
    autocmd FileType json,jsonnet,markdown,yaml   setl sw=2 ts=2 sts=2
    autocmd FileType javascript,typescript,lua    setl sw=2 ts=2 sts=2

    autocmd FileType json syntax match Comment +\/\/.\+$+
    autocmd FileType yaml setl indentexpr=
augroup END

" ----> Tricks
augroup VimTricks
    autocmd!
    " trim trailing whitespace on write
    autocmd BufWritePre * if !&bin | exe 'normal mz' | exe ':keepp %s/\v\s+$//ge' | exe 'normal `z' | endif
    " remember cursor position
    autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") && &ft !~# 'commit\|xxd\|gitrebase\|tutor' && !&diff | exe "normal! g`\"" | endif
    " close the quickfix or locationlist window when exiting
    autocmd QuitPre     * if empty(&buftype) | cclose | lclose | endif
    " auto source $MYVIMRC
    autocmd BufWritePost $MYVIMRC nested source $MYVIMRC
    " automatically equalize windows when vim is resized
    autocmd VimResized * wincmd =
augroup END
