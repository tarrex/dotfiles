--recurse=yes
--tag-relative=yes
--exclude=*.git*
--exclude=*.pyc
--exclude=*.pyo
--exclude=.DS_Store

--langdef=markdown
--langmap=markdown:.mkd
--regex-markdown=/^#[ \t ]+(.*)/\1/h,Heading_L1/
--regex-markdown=/^##[ \t ]+(.*)/\1/i,Heading_L2/
--regex-markdown=/^###[ \t ]+(.*)/\1/k,Heading_L3/

--langdef=Rust
--langmap=Rust:.rs
--regex-Rust=/^[ \t ]*(#\[[^\]]\][ \t ]*)*(pub[ \t ]+)?(extern[ \t ]+)?("[^"]+"[ \t ]+)?(unsafe[ \t ]+)?fn[ \t ]+([a-zA-Z0-9_]+)/\6/f,functions,function definitions/
--regex-Rust=/^[ \t ]*(pub[ \t ]+)?type[ \t ]+([a-zA-Z0-9_]+)/\2/T,types,type definitions/
--regex-Rust=/^[ \t ]*(pub[ \t ]+)?enum[ \t ]+([a-zA-Z0-9_]+)/\2/g,enum,enumeration names/
--regex-Rust=/^[ \t ]*(pub[ \t ]+)?struct[ \t ]+([a-zA-Z0-9_]+)/\2/s,structure names/
--regex-Rust=/^[ \t ]*(pub[ \t ]+)?mod[ \t ]+([a-zA-Z0-9_]+)/\2/m,modules,module names/
--regex-Rust=/^[ \t ]*(pub[ \t ]+)?(static|const)[ \t ]+(mut[ \t ]+)?([a-zA-Z0-9_]+)/\4/c,consts,static constants/
--regex-Rust=/^[ \t ]*(pub[ \t ]+)?(unsafe[ \t ]+)?trait[ \t ]+([a-zA-Z0-9_]+)/\3/t,traits,traits/
--regex-Rust=/^[ \t ]*(pub[ \t ]+)?(unsafe[ \t ]+)?impl([ \t\n ]*<[^>]*>)?[ \t ]+(([a-zA-Z0-9_:]+)[ \t ]*(<[^>]*>)?[ \t ]+(for)[ \t ]+)?([a-zA-Z0-9_]+)/\5 \7 \8/i,impls,trait implementations/
--regex-Rust=/^[ \t ]*macro_rules![ \t ]+([a-zA-Z0-9_]+)/\1/d,macros,macro definitions/]")

--regex-make=/^([^# \t]*):/\1/t,target/

--langdef=R
--langmap=r:.R.r
--regex-R=/^[ \t]*"?([.A-Za-z][.A-Za-z0-9_]*)"?[ \t]*<-[ \t]function/\1/f,Functions/
--regex-R=/^"?([.A-Za-z][.A-Za-z0-9_]*)"?[ \t]*<-[ \t][^f][^u][^n][^c][^t][^i][^o][^n]/\1/g,GlobalVars/
--regex-R=/[ \t]"?([.A-Za-z][.A-Za-z0-9_]*)"?[ \t]*<-[ \t][^f][^u][^n][^c][^t][^i][^o][^n]/\1/v,FunctionVariables/
