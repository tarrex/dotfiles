# vim: ft=gitconfig cms=#\ %s

# Tarrex's git config file.
#
# Git release notes:
#   https://github.blog/open-source/git/
#   https://github.com/git/git/tree/master/Documentation/RelNotes

# Basic options
[core]
    quotePath = false
    editor    = vim         # code --wait
    pager     = less -FRXM  # bat --paging=always

[alias]
    cm = commit -m
    ca = commit --amend
    ls = ls-files
    st = status --short
    ps = status --short --branch
    sm = submodule update --recursive
    sw = switch
    rs = restore

    cloc = !git ls-files | xargs cloc -v=1 --skip-archive='(zip|tar(.(gz|Z|bz2|xz|7z))?)'
    rank = shortlog -sne --no-merges
    stat = !git --no-pager diff --stat
    glog = log --graph --oneline --decorate --all --date-order --format=format:'%C(bold red)%h%C(reset) - %C(white)%s%C(reset) %C(bold green)(%ar)%C(reset) %C(dim white)<%an>%C(reset)%C(bold yellow)%d%C(reset)'
    slog = log --stat --graph --date-order --oneline
    last = log --oneline --decorate --all -n 10

    unstage  = restore --staged
    uncommit = reset --soft HEAD^
    unpush   = push --force-with-lease origin HEAD^:$(git rev-parse --abbrev-ref HEAD)
    prune    = fetch --prune

    search        = "!f() { git log -p -G$1 --all; }; f"
    searchcommit  = "!f() { git log -G$1 --all; }; f"
    searchmessage = "!f() { git log --grep=$1; }; f"
    filehistory   = "!f() { git log --follow -p -- $1; }; f"
    serve         = "!f() { git daemon --reuseaddr --verbose --base-path=. --export-all --listen=${1:-127.0.0.1} --port=${2:-9418} ./.git; }; f"
    ignore        = "!gi() { curl -sL https://www.toptal.com/developers/gitignore/api/$@ ;}; gi"
    stash-all     = stash push --include-untracked
    delete-merged = !git branch --merged | grep -Ev '(\\*|master|main|dev|develop)' | xargs -n 1 git branch -d
    check-config  = config --list --show-origin
    aliases       = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

[init]
    defaultBranch = main

[credential]
    helper = osxkeychain
    helper = cache --timeout=30000

[status]
    showUntrackedFiles = all
    submoduleSummary   = true

[diff]
    renames         = true
    submodule       = log
    algorithm       = histogram
    indentHeuristic = true
    colorMoved      = default
    tool            = vimdiff    # code
# [difftool "code"]
#     cmd = code --wait --diff $LOCAL $REMOTE
[merge]
    log           = true
    ff            = true
    conflictstyle = diff3
    tool          = vimdiff
[commit]
    template = message
    verbose  = true
[push]
    default            = current
    followTags         = true
    useForceIfIncludes = true

# HTTP proxy
# [http "https://github.com"]
#     proxy     = http://127.0.0.1:7890
#     # proxy     = socks5h://127.0.0.1:7890

# Force git to use SSH
[url "git@github.com:"]
    insteadOf = https://github.com/
# [url "git://"]
#     insteadOf = https://

# Force git to use HTTPS
# [url "https://github.com/"]
#     insteadOf = git@github.com:
# [url "https://"]
#     insteadOf = git://

# Short URL
# [url "https://github.com/"]
#     insteadOf = gh:

[color]
    ui = auto
[color "advice"]
    hint = yellow
[color "branch"]
    current  = yellow reverse
    local    = yellow
    remote   = cyan
    upstream = magenta
    plain    = red
[color "status"]
    added     = green
    changed   = yellow
    untracked = red

[i18n]
    logOutputEncoding = utf-8

[rerere]
    enabled    = true
    autoUpdate = true

[instaweb]
    httpd = webrick
    local = true
    port  = 1234

# Security
[transfer]
    fsckObjects = true
[fetch]
    fsckObjects = true
[receive]
    fsckObjects = true

# Git LFS
# [filter "lfs"]
#     clean    = git-lfs clean -- %f
#     smudge   = git-lfs smudge -- %f
#     process  = git-lfs filter-process
#     required = true

# Delta
# [include]
#     path = delta

# [include]
#     path = config.d/example.gitconfig
# [includeIf "hasconfig:remote.*.url:https://github.com/example/*"]
#     path = config.d/example.gitconfig
# [includeIf "hasconfig:remote.*.url:git@github.com:example/*"]
#     path = config.d/example.gitconfig
# [includeIf "gitdir:~/example/"]
#     path = config.d/example.gitconfig
