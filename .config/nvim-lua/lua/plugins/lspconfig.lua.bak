local ok, lspconfig = pcall(require, 'lspconfig')
if not ok then return end

-- Signs
-- local signs = { Error = ' ', Warn = ' ', Hint = ' ', Info = ' ' }
local signs = { Error = ' ', Warn = ' ', Hint = ' ', Info = ' ' }
for type, icon in pairs(signs) do
  local hl = 'DiagnosticSign' .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
end

-- Diagnostic
local config = {
  virtual_text = false,
  signs = { active = signs },
  update_in_insert = true,
  underline = true,
  severity_sort = true,
  float = {
    focusable = false,
    style = 'minimal',
    border = 'rounded',
    source = 'always',
    header = '',
    prefix = ''
  }
}
vim.diagnostic.config(config)

-- Handlers
-- vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {
--   virtual_text = false,
--   signs = true,
--   underline = true,
--   update_in_insert = false,
-- })

vim.lsp.handlers['textDocument/hover'] = vim.lsp.with(vim.lsp.handlers.hover, {
  border = 'rounded',
  width = 60,
})

vim.lsp.handlers['textDocument/signatureHelp'] = vim.lsp.with(vim.lsp.handlers.signature_help, {
  border = 'rounded',
  width = 60,
})

-- Keymaps
local lsp_keymaps = function(bufnr)
  local opts = { noremap = true, silent = true, buffer = bufnr }

  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
  vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
  vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
  vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
  vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
  vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
  vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)
  vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, opts)
  -- vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)
  vim.keymap.set('n', '<space>q', function() vim.diagnostic.setqflist({ open = true }) end, opts)

  -- vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
  -- vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
  -- vim.keymap.set('n', '<space>wl', function() print(vim.inspect(vim.lsp.buf.list_workspace_folders())) end, opts)
end

-- Format
local lsp_formatting = function(client, bufnr)
  if client.name == 'tsserver' then
    client.server_capabilities.document_formatting = false
  end
  local opts = { noremap = true, silent = true, buffer = bufnr }
  if client.resolved_capabilities.document_formatting then
    vim.keymap.set('n', 'ff', vim.lsp.buf.formatting_sync, opts)
  end
  if client.resolved_capabilities.document_range_formatting then
    vim.keymap.set('x', 'ff', vim.lsp.buf.range_formatting, opts)
  end
end

-- Autocmds
local lsp_autocmds = function(bufnr)
  vim.api.nvim_create_autocmd('CursorHold', {
    buffer = bufnr,
    callback = function()
      local opts = {
        focusable = false,
        close_events = { 'BufLeave', 'CursorMoved', 'InsertEnter', 'FocusLost' },
        border = 'rounded',
        source = 'always',
        prefix = ' ',
        scope = 'cursor',
      }
      vim.diagnostic.open_float(nil, opts)
    end
  })
end

-- Highlight symbol under cursor
local lsp_highlight = function(client)
  if client.resolved_capabilities.document_highlight then
    vim.cmd([[
      hi! link LspReferenceRead Visual
      hi! link LspReferenceText Visual
      hi! link LspReferenceWrite Visual
    ]])
    vim.api.nvim_create_augroup('lsp_document_highlight', {})
    vim.api.nvim_create_autocmd({ 'CursorHold', 'CursorHoldI' }, {
      group = 'lsp_document_highlight',
      buffer = 0,
      callback = vim.lsp.buf.document_highlight,
    })
    vim.api.nvim_create_autocmd('CursorMoved', {
      group = 'lsp_document_highlight',
      buffer = 0,
      callback = vim.lsp.buf.clear_references,
    })
  end
end

-- LSP on_attach
local on_attach = function(client, bufnr)
  lsp_keymaps(bufnr)
  lsp_formatting(client, bufnr)
  lsp_autocmds(bufnr)
  lsp_highlight(client)

  if vim.g.logging_level == 'debug' then
    local msg = string.format('Language server %s started!', client.name)
    vim.notify(msg, 'info', { title = 'Nvim-config' })
  end
end

-- LSP capabilities
local capabilities = vim.lsp.protocol.make_client_capabilities()
local cmp_ok, cmp_nvim_lsp = pcall(require, 'cmp_nvim_lsp')
if cmp_ok then
  capabilities = cmp_nvim_lsp.update_capabilities(capabilities)
end
-- capabilities.textDocument.completion.completionItem.snippetSupport = true

-- Language server configuration
local servers = {
  bashls = {},
  clangd = {},
  html = {},
  cssls = {},
  jsonls = {
    settings = {
      json = {
        schemas = {
          {
            description = 'TypeScript compiler configuration file',
            fileMatch = {
              'tsconfig.json',
              'tsconfig.*.json',
            },
            url = 'https://json.schemastore.org/tsconfig.json',
          },
          {
            description = 'Babel configuration',
            fileMatch = {
              '.babelrc.json',
              '.babelrc',
              'babel.config.json',
            },
            url = 'https://json.schemastore.org/babelrc.json',
          },
          {
            description = 'ESLint config',
            fileMatch = {
              '.eslintrc.json',
              '.eslintrc',
            },
            url = 'https://json.schemastore.org/eslintrc.json',
          },
          {
            description = 'Prettier config',
            fileMatch = {
              '.prettierrc',
              '.prettierrc.json',
              'prettier.config.json',
            },
            url = 'https://json.schemastore.org/prettierrc',
          },
          {
            description = 'Stylelint config',
            fileMatch = {
              '.stylelintrc',
              '.stylelintrc.json',
              'stylelint.config.json',
            },
            url = 'https://json.schemastore.org/stylelintrc',
          },
          {
            description = 'LLVM compilation database',
            fileMatch = {
              'compile_commands.json',
            },
            url = 'https://json.schemastore.org/compile-commands.json',
          },
          {
            description = 'golangci-lint configuration file',
            fileMatch = {
              '.golangci.toml',
              '.golangci.json',
            },
            url = 'https://json.schemastore.org/golangci-lint.json',
          },
          {
            description = 'Packer template JSON configuration',
            fileMatch = {
              'packer.json',
            },
            url = 'https://json.schemastore.org/packer.json',
          },
          {
            description = 'NPM configuration file',
            fileMatch = {
              'package.json',
            },
            url = 'https://json.schemastore.org/package.json',
          },
        }
      }
    }
  },
  yamlls = {
    settings = {
      yaml = {
        schemas = {
          ['https://raw.githubusercontent.com/instrumenta/kubernetes-json-schema/master/v1.18.0-standalone-strict/all.json'] = '/*.k8s.yaml',
          ['https://raw.githubusercontent.com/docker/compose/master/compose/config/compose_spec.json'] = '/docker-compose*.y?(a)ml',
          ['https://json.schemastore.org/github-action.json'] = '/action.y?(a)ml',
          ['https://json.schemastore.org/github-workflow.json'] = '/.github/workflows/*'
        },
      }
    }
  },
  gopls = {
    settings = {
      gopls = {
        analyses = {
          unusedparams = true,
          shadow = true,
        },
        gofumpt = true,
        staticcheck = true,
        codelenses = {
          gc_details = true,
        }
      },
    },
    -- init_options = {
    --   usePlaceholders = true,
    -- }
  },
  sumneko_lua = {
    settings = {
      Lua = {
        diagnostics = {
          globals = { 'vim' },
        },
        workspace = {
          library = {
            [vim.fn.expand('$VIMRUNTIME/lua')] = true,
            [vim.fn.stdpath('config') .. '/lua'] = true
          }
        },
        telemetry = {
          enable = false,
        },
      },
    }
  },
  pyright = {},
  rust_analyzer = {},
  tsserver = {},
  vimls = {},
}

for server, custom in ipairs(servers) do
  local opts = {
    on_attach = on_attach,
    capabilities = capabilities,
  }
  if custom then
    opts = vim.tbl_deep_extend('force', opts, custom)
  end
  lspconfig[server].setup(opts)
end
